spring.application.name=doctor-service

spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/lib}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:password}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}


server.port=8080


spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS}
spring.kafka.consumer.group-id=doctor-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.topics.doctor=doctor-topic

# Producer Configuration
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Consumer Configuration
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Trust packages for deserialization
spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.doctor_service*

#spring.kafka.consumer.properties.spring.json.trusted.packages=*
#spring.kafka.consumer.properties.spring.json.value.default.type=java.lang.String
#spring.kafka.listener.missing-topics-fatal=false
